sudoku=[[[5,3,0],[6,0,0],[0,9,8]],[[0,7,0],[1,9,5],[0,0,0]],[[0,0,0],[0,0,0],[0,6,0]],[[8,0,0],[4,0,0],[7,0,0]],[[0,6,0],[8,0,3],[0,2,0]],[[0,0,3],[0,0,1],[0,0,6]],[[0,6,0],[0,0,0],[0,0,0]],[[0,0,0],[4,1,9],[0,8,0]],[[2,8,0],[0,0,5],[0,7,9]]]    #sets the sudoku values
emptyCells=[]    #declares the value emptyCells as an empty list

######################################################################################################################################################

def printSudoku():      #creates the function printSudoku
    print()             
    print(sudoku[0][0],'|',sudoku[1][0],'|',sudoku[2][0])
    print(sudoku[0][1],'|',sudoku[1][1],'|',sudoku[2][1])
    print(sudoku[0][2],'|',sudoku[1][2],'|',sudoku[2][2])
    print("----------|-----------|----------")
    print(sudoku[3][0],'|',sudoku[4][0],'|',sudoku[5][0])
    print(sudoku[3][1],'|',sudoku[4][1],'|',sudoku[5][1])
    print(sudoku[3][2],'|',sudoku[4][2],'|',sudoku[5][2])
    print("----------|-----------|----------")
    print(sudoku[6][0],'|',sudoku[7][0],'|',sudoku[8][0])
    print(sudoku[6][1],'|',sudoku[7][1],'|',sudoku[8][1])
    print(sudoku[6][2],'|',sudoku[7][2],'|',sudoku[8][2])
    print()

######################################################################################################################################################

def inColumn(squ, col, num):   #creates the function inColumn and takes 3 parameters                                                                                      
    clash=''    #declares the variable clash as an empty string
    if squ < 3:      #checks if square is in the top row
        for y in list(range(squ,squ+1)) + list(range(squ+3,squ+4)) + list(range(squ+6,squ+7)):  #loops through the current square and the two beneath it
            for x in range(3):  #loops through the cells within the squares
                if (sudoku[y][x][col] == num):  #compares the cells to the number that might be assigned
                    clash='Y'   #if its true then it assings Y to clash
    elif squ > 5:     #checks if square is in the top row
        for y in list(range(squ-6,squ-5)) + list(range(squ-3,squ-2)) + list(range(squ,squ+1)):    #loops through the current square and the two above it
            for x in range(3):  #loops through the cells within the squares
                if (sudoku[y][x][col] == num):  #compares the cells to the number that might be assigned
                    clash='Y'  #if its true then it assings Y to clash
    else:    #checks if square is in the middle row
        for y in list(range(squ-3,squ-2)) + list(range(squ,squ+1)) + list(range(squ+3,squ+4)):    #loops through the current square and the ones on top and beneath it
            for x in range(3):  #loops through the cells within the squares
                if (sudoku[y][x][col] == num):  #compares the cells to the number that might be assigned
                    clash='Y'   #if its true then it assings Y to clash
    return clash        #returns the value of clash back to the main code

def inRow(squ, row, num):    #creates the function inColumn and takes 3 parameters
    clash=''    #declares the variable clash as an empty string
    if squ == 0 or square == 3 or square == 6:
        for y in range(square,square+3):
            for x in range(3):
                if (sudoku[y][row][x] == num):
                    clash='Y'    #if its true then it assings Y to clash
    elif square == 1 or square == 4 or square == 7:
        for y in range(square-1,square+2):
            for x in range(3):
                if (sudoku[y][row][x] == num):
                    clash='Y'    #if its true then it assings Y to clash
    else:
        for y in range(square-2,square+1):
            for x in range(3):
                if (sudoku[y][row][x] == num):
                    clash='Y'    #if its true then it assings Y to clash
    return clash

def inSquare(square, num):
    clash=''
    for x in range(3):
        for y in range(3):
            if (sudoku[square][x][y] == num):
                clash='Y'             
    return clash
  
#####################################################################################################################################################

def backTrack(square, row, column, currentCell):
    preS=square
    preR=row
    preC=column
    currentCell=currentCell-1
    s=emptyCells[currentCell-1][0]
    r=emptyCells[currentCell-1][1]
    c=emptyCells[currentCell-1][2]
    square=int(s)
    row=int(r)
    column=int(c)
    num=sudoku[square][row][column]
    checkNext(square, row, column, num, currentCell)
    currentCell=currentCell+1
    checkNext(preS, preR, preC, 0, currentCell)
    
#####################################################################################################################################################

def checkNext(square, row, column, num, currentCell):
    if num == 9:
        sudoku[square][row][column] = 0
        backTrack(square, row, column, currentCell)      
    else:
        num=num+1
        squareClash = inSquare(square, num)
        if squareClash != 'Y':
            rowClash = inRow(square, row, num)
            if rowClash != 'Y':
                columnClash = inColumn(square, column, num)
                if columnClash != 'Y':
                    sudoku[square][row][column]=num
                else:
                    checkNext(square, row, column, num, currentCell)
            else:
                checkNext(square, row, column, num, currentCell)
        else:
            checkNext(square, row, column, num, currentCell)
            

#####################################################################################################################################################

def storeEmpty(s, r, c):
    strs=str(s)
    strr=str(r)
    strc=str(c)
    coordinates=strs+strr+strc
    emptyCells.append(coordinates)

#####################################################################################################################################################

printSudoku()

currentCell=0
for s in range(9):
        for r in range(3):
            for c in range(3):
                if sudoku[s][r][c]==0:
                    currentCell=currentCell+1
                    checkNext(s, r, c, 0, currentCell)
                    storeEmpty(s, r, c)                  
printSudoku()
