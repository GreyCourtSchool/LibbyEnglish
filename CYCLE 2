from tkinter import *   #imports everyhting from tkinter to be used
import sys
sudoku=[[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]]]
#^declares the sudoku as an array
emptyCells=[]   #declares the value emptyCells as an empty list

########################

def solveSudoku():  #creates the fucntion solveSudoku
    currentCell=0  #sets currentCell to 0
    validate()   #calls the function validate
    for s in range(9):   
        for r in range(3):
            for c in range(3):
                var=globals()['s'+str(s+1)+'r'+str(r+1)+'c'+str(c+1)].get() #assigns var to the value inside the current cell
                if var=='': #checks if the cell has nothing entered
                    sudoku[s][r][c]=0   #sets the value to 
                else:   #all other cells must have a number inside them
                    sudoku[s][r][c]=int(var)    #assigns the respective item in the sudoku array to the integer withing the current cell
                if sudoku[s][r][c]==0:  #checks if the cell is empty
                    currentCell=currentCell+1   #increments currentCell by 1
                    checkNext(s, r, c, 0, currentCell)  #calls checkNext
                    storeEmpty(s, r, c)     #calls storeEmpty
    printSudoku()   #calls function printSudoku

######################

def inColumn(squ, col, num):   #creates the function inColumn and takes 3 parameters                                                                                      
    clash=''    #declares the variable clash as an empty string
    if squ < 3:      #checks if square is in the top row
        for y in list(range(squ,squ+1)) + list(range(squ+3,squ+4)) + list(range(squ+6,squ+7)):
            #^loops through the current square and the two beneath it
            for x in range(3):  #loops through the cells within the squares
                if (sudoku[y][x][col] == num):  #compares the cells to the number that might be assigned
                    clash='Y'   #if its true then it assings Y to clash
    elif squ > 5:     #checks if square is in the top row
        for y in list(range(squ-6,squ-5)) + list(range(squ-3,squ-2)) + list(range(squ,squ+1)):
            #^loops through the current square and the two above it
            for x in range(3):  #loops through the cells within the squares
                if (sudoku[y][x][col] == num):  #compares the cells to the number that might be assigned
                    clash='Y'  #if its true then it assings Y to clash
    else:    #all other squares must be in the middle row
        for y in list(range(squ-3,squ-2)) + list(range(squ,squ+1)) + list(range(squ+3,squ+4)):
            #^loops through the current square and the ones on top and beneath it
            for x in range(3):  #loops through the cells within the squares
                if (sudoku[y][x][col] == num):  #compares the cells to the number that might be assigned
                    clash='Y'   #if its true then it assings Y to clash
    return clash    #returns the value stored in clash to the variable columnClash

#########################################################################################################################

def inRow(squ, row, num):    #creates the function inRow and takes 3 parameters
    clash=''    #declares the variable clash as an empty string
    if squ == 0 or squ == 3 or squ == 6:    #checks if the square is in leftmost column
        for y in range(squ,squ+3):  #iterates through current square and the two to the right
            for x in range(3):  #loops through the cells within the row
                if (sudoku[y][row][x] == num):  #compares the cells to num
                    clash='Y'    #if its true then it assings Y to clash
    elif squ == 1 or squ == 4 or squ == 7:  #checks if the square is in the middle column
        for y in range(squ-1,squ+2):    #iterates through current square and the two on either side
            for x in range(3):   #loops through the cells within the row
                if (sudoku[y][row][x] == num):  #compares the cells to num
                    clash='Y'    #if its true then it assings Y to clash
    else:   #all other squares must be in rightmost column
        for y in range(squ-2,squ+1):    #iterates through current square and the two to the left
            for x in range(3):   #loops through the cells within the row
                if (sudoku[y][row][x] == num):  #compares the cells to num
                    clash='Y'    #if its true then it assings Y to clash
    return clash    #returns the value stored in clash to the variable rowClash
  
#########################################################################################################################

def inSquare(squ, num):  #creates the function inSquare and takes 2 parameters
    clash=''    #declares the variable clash as an empty string
    for x in range(3):  #loops through the rows
        for y in range(3):  #loops through the columns
            if (sudoku[squ][x][y] == num):  #compares the cells to num
                clash='Y'   #if true then assigns 'Y' to clash
    return clash    #returns the value stored in clash to the variable squareClash
  
#########################################################################################################################

def backTrack(square, row, column, currentCell):    #creates the function backTrack and takes 4 arguments
    currentCell=currentCell-1   #decreases currentCell by 1
    prevSquare=int(emptyCells[currentCell-1][0])  #takes first char from the previous string stored in emptycells and converts to an integer
    prevRow=int(emptyCells[currentCell-1][1])  #takes second char from the previous string stored in emptycells and converts to an integer
    prevColumn=int(emptyCells[currentCell-1][2])  #takes last char from the previous string stored in emptycells and converts to an integer
    prevNum=sudoku[prevSquare][prevRow][prevColumn] #takes the value that was in the previous cell and 
    checkNext(prevSquare, prevRow, prevColumn, prevNum, currentCell)    #calls checkNext with co-ordinates and num from previous cell
    currentCell=currentCell+1   #increases currentCell by 1
    checkNext(square, row, column, 0, currentCell)  #calls checkNext with the original co-ordinates and num
    
#########################################################################################################################

def checkNext(square, row, column, num, currentCell):    #creates the function checkNext and takes 5 arguements
    if num == 9:    #checks if the number in the call cannot be increased any more and needs to backtrack
        sudoku[square][row][column] = 0     #assigns the number to 0
        backTrack(square, row, column, currentCell)      #calls backtrack and passes in the coordinates and the currentCell
    else:   
        num=num+1   #increases num by one
        squareClash = inSquare(square, num)     #calls squareClash and assigns the value it returns to squareClash
        if squareClash != 'Y':  #checks if squareClash is not Y (so there isn't a clash)
            rowClash = inRow(square, row, num)     #calls squareClash and assigns the value it returns to squareClash
            if rowClash != 'Y':     #checks if squareClash is not Y
                columnClash = inColumn(square, column, num) #calls inColumn and assigns the value it returns to columnClash
                if columnClash != 'Y':  #checks if columnClash is not 'Y' 
                    sudoku[square][row][column]=num     #num is assigned to the curret cell
                else:   #there is a clash
                    checkNext(square, row, column, num, currentCell) #calls checkNext with the new value for num
            else:
                checkNext(square, row, column, num, currentCell)
        else:
            checkNext(square, row, column, num, currentCell)
           

#########################################################################################################################

def storeEmpty(s, r, c):    #makes the function storeEmpty and takes 3 arguements
    strs=str(s)     #this section converts the variables into a string
    strr=str(r)     
    strc=str(c)     
    coordinates=strs+strr+strc  #the strings are combined into one string called coordinates
    emptyCells.append(coordinates)  #adds the current string to the array


#########################################################################################################################

def validate():
    clues=0     #sets clues to 0
    for s in range(9):  #iterates through each square
        for r in range(3):  #iterates through each row
            for c in range(3):  #iterates through each column
                var=globals()['s'+str(s+1)+'r'+str(r+1)+'c'+str(c+1)].get() #sets var to the current value inside the cell
                if len(str(var))>1:     #checks the length of var
                    print('One of your inputs is too big, they can only be one digit')
                    sys.exit()  #ends the program
                if var != '':  #checks if the cell is not empty
                    clues=clues+1   #counts the amount of clues used throughout the sudoku
                try:    #attempts the next line of code
                    test = int(var) #tests to see if the value is an int
                except ValueError:  #if it enounters ValueError then it outputs the error message
                    print("Please make sure all of your inputs are numbers")
                    sys.exit()  #ends the program
    if clues < 17:  #checks is the amount of clues is under 17
        print('Not enough clues are provided to be able to solve the sudoku, only ',clues,' have been provided.')
        sys.exit()  #ends the program


#######################
def drawGrid(frame):    #creates drwaGrid and assigns whatever has been passed in to 'frame'
   frame_sudokuEntry = Frame(frame, background="black")     #creates a frame within 'frame' and makes it black
   frame_sudokuEntry.grid(row=3, column=0, columnspan=3, rowspan =3)    #positions the new fmare
   for x in range (1,4):    #loops through 1 to 3
      for y in range (1,4):     #loops through 1 to 3
         frame_3x3 = Frame(frame_sudokuEntry, background="black") #creates a frame that will be repeated 9 times
         frame_3x3.grid(row=x, column=y, columnspan=1, padx=2, pady=2)  #positions each frame
         squ=(3*x)+y-3 #creates a variable that will count from 1 to 9 with each iteration
         globals()['s'+str(squ)+'r1c1'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white") #creates an entry box that'll be cell s1r1c1
         globals()['s'+str(squ)+'r1c1'].grid(row=1, column=1, padx=2, pady=2)   #positions cell in top left
         globals()['s'+str(squ)+'r1c2'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white") #creates an entry box that'll be cell s1r1c1
         globals()['s'+str(squ)+'r1c2'].grid(row=1, column=2, padx=2, pady=2)   #positions cell in top middle
         globals()['s'+str(squ)+'r1c3'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white") #creates an entry box that'll be cell s1r1c1
         globals()['s'+str(squ)+'r1c3'].grid(row=1, column=3, padx=2, pady=2)   #positions cell in top right
         globals()['s'+str(squ)+'r2c1'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white") #continues to create entr boxes respectivley
         globals()['s'+str(squ)+'r2c1'].grid(row=2, column=1, padx=2, pady=2)   #continues to position cells respectivley
         globals()['s'+str(squ)+'r2c2'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white")
         globals()['s'+str(squ)+'r2c2'].grid(row=2, column=2, padx=2, pady=2)
         globals()['s'+str(squ)+'r2c3'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white")
         globals()['s'+str(squ)+'r2c3'].grid(row=2, column=3, padx=2, pady=2)
         globals()['s'+str(squ)+'r3c1'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white")
         globals()['s'+str(squ)+'r3c1'].grid(row=3, column=1, padx=2, pady=2)
         globals()['s'+str(squ)+'r3c2'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white")
         globals()['s'+str(squ)+'r3c2'].grid(row=3, column=2, padx=2, pady=2)
         globals()['s'+str(squ)+'r3c3'] = Entry(frame_3x3, width=2, bd=15, relief=FLAT, bg="white")
         globals()['s'+str(squ)+'r3c3'].grid(row=3, column=3, padx=2, pady=2)

#######################

def printSudoku():  #creates the function printSudoku
    for s in range(9):
        for r in range(3):
            for c in range(3):
                globals()['s'+str(s+1)+'r'+str(r+1)+'c'+str(c+1)].delete(0, END)    #this deletes any value that was originally in the cells
                globals()['s'+str(s+1)+'r'+str(r+1)+'c'+str(c+1)].insert(0, sudoku[s][r][c])    #inserts the completed sudoku into the grid
                
########################

def changeWindow(self, window): #creates the function changeWindow
   self.withdraw()  #closes current window
   window.state('normal')   #brings whichever window is passed second back up

########################

menu = Tk() #creates 'menu' as a window and sets it to be the main screen
menu.geometry("900x500")    #sets the size of the window
menu.title("Sudoku Solver")     #sets the title of the window
menu.resizable(False, False)    #ensires the user cannot resize the window
menu.configure(background="Light Blue") #makes the background light blue

mainFrame = Frame(menu, background="Light Blue")    #creates a framw within 'menu' and sets background to light blue
mainFrame.grid(row=0, column=0, columnspan=10, rowspan=6, padx=70, pady=50) #positions frame, sets how many columns and rows there will be

class MenuPage():   #creates the class MenuPage
    wholeSudoku_button = Button(mainFrame, text="Solve Whole Sudoku", width=20, command=lambda:changeWindow(menu, full)).grid(row=1, column=1, pady=30)
    #^creates a button, sets its size and function (passing in menu and full) and positions it at the coordinates identified
    singleCell_button = Button(mainFrame, text="Solve A Single Cell", width=20, command=lambda:changeWindow(menu, single)).grid(row=2, column=1, pady=30)
    #^creates a button, sets its size and function (passing in menu and single) and positions it at the coordinates identified
    randomcell_button = Button(mainFrame, text="Solve Random Cells", width=20, command=lambda:changeWindow(menu, random)).grid(row=3, column=1, pady=30)
    #^creates a button, sets its size and function (passing in menu and random) and positions it at the coordinates identified
    title = Label(mainFrame, text = "Sudoku Solver", font =("Ariel", 30),relief = "flat", background = "Light Blue", width = 35, height = 2)
    #^creates the title, sets its font, font size, relife, background colour and size
    title.grid(row=0, column=0, columnspan=20)  #positions at specified coordinates, makes it span 20 columns
    whole_text = Label(mainFrame, relief = "flat", font = "Ariel", background = "Light Blue", width = 35, wraplength=325, text = "Choose this option if you would like your sudoku to be solved and all the cells to be filled")
    #^creates the text box, sets its font, font size, relife, background colour, wraplength and size
    whole_text.grid(row=1, column=3, padx=100)    #positions the text at the specified location and sets padding to 100
    single_text = Label(mainFrame, relief = "flat", font = "Ariel", background = "Light Blue", width = 35, wraplength=325, text = "Choose this option if you would like to pick a cell of the sudoku to be solved")
    #^creates the text box, sets its font, font size, relife, background colour, wraplength and size
    single_text.grid(row=2, column=3)   #positions the text at the specified location
    random_text = Label(mainFrame, relief = "flat", font = "Ariel", background = "Light Blue", width = 35, wraplength=325, text = "Choose this option if you would like to single a number of random cells to be solved")
    #^creates the text box, sets its font, font size, relife, background colour, wraplength and size
    random_text.grid(row=3, column=3)   #positions the text at the specified location

########################

full = Toplevel(menu)   #creates the window 'full' whih stems from menu
full.geometry("900x650")    #sets the size of the window
full.title("Sudoku Solver")     #sets the title of the window
full.resizable(False, False)    #ensures the user cannot resize the grid
full.configure(background="Light Blue") #makes the background light blue

wholeSudoku= Frame(full, background="Light Blue")   #creates a frame within the 'full' window
wholeSudoku.grid(row=0, column=0, columnspan=10, rowspan=6, padx=70, pady=20)   #sets position, how many columns and rows there will be and 

class SudokuPage():     #creates the class SudokuPage
    title = Label(wholeSudoku, text = "Whole Sudoku Solver", font=("Ariel", 30), background = "Light Blue", width = 35, height = 2)
    #^creates the title, sets its font, font size, background colour and size
    title.grid(row=0, column=2, columnspan=3, rowspan=3) #positions the title within the wholeSudoku frame
    drawGrid(wholeSudoku)    #calls the function drawGrid with the wholeSudoku passed in
    guide = Label(wholeSudoku, relief = "flat", font = "Ariel", background = "Light Blue", width = 30, wraplength=250, text = 'This feature will solve the whole suodku for you. Please enter in all of the numbers that you know and click the solve button once done. The answers will then appear in the grid that you inputted them. If a solution cannot be found then an error message will be outputted. If you would like to use a different function, use the main menu button to navigate to it.')
    #^creates the text block, sets its font, balckground colour, size, wraplength and relief
    guide.grid(row=3, column=3, columnspan=2)    #positions the text
    solve_button = Button(wholeSudoku, text="Solve Sudoku", width=20, command=lambda:solveSudoku())  #creates the button, sets the attributes and function
    solve_button.grid(row=5, column=3)   #positions the button
    mainmenu_button = Button(wholeSudoku, text="Main Menu", width=20, command=lambda:changeWindow(full, menu))#creates the button, sets the attributes and function
    mainmenu_button.grid(row=5, column=4)    #positions the button

 
########################

full.withdraw() #stops the other page from loading from the offset
mainloop()  #starts the code which will load all the pages
